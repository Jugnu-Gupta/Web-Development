/* Flex Container */

/* 1. The "flex-direction" CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed). */
/* 2. "flex-wrap" controls how flex items are arranged within a flex container when they don't have enough space to fit in a single line or row. */
/* 3. The "flex-flow" CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior. */
/* flex-flow: <'flex-direction'> and <'flex-wrap'>
flex-flow: row nowrap;
flex-flow: column wrap;
flex-flow: column-reverse wrap-reverse; */

/* 4. The CSS "justify-content" property defines how the browser distributes space between and around content items along the main-axis of a flex container, 
and the inline axis of a grid container. */
/* 5. The CSS "align-items" property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. */
/* 6. "align-content" is a CSS property used within a flex container to control how multiple rows or columns of flex items are aligned and 
spaced in the cross-axis (the perpendicular axis to the main axis) when they wrap onto new lines due to lack of space. */

/* --------------------------------------------------------------------------------------------------------------------------------------------------- */

/* Flex item */

/* 1. The "order" CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending order value and then by their source code order. */
/* 2. The "flex-grow" CSS property sets the flex grow factor, which specifies how much of the flex container's remaining space should be assigned to the flex item's */
/* 3. The "flex-shrink" CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to flex-shrink. */
/* 4. The "flex-basis" CSS property sets the initial length towards main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing. */
/* 5. The "align-self" CSS property overrides a grid or flex item's align-items value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis. */
/* 6. The "flex" property is a shorthand property for:
flex-grow
flex-shrink
flex-basis
Default value:	0 1 auto */
/* e.g: flex:1 2 auto; */

/* flex: size(flex-basis) 
   e.g: flex:400px; */

/* flex: number(flex-grow) 
   e.g: flex:1; */

/* flex: number(flex-grow) number(flex-shrink) 
   e.g: flex:1 1; */


*{
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;
}
.container{
    background-color: rgb(146, 246, 6);
    border: 5px solid black;
    margin: 2px;
    padding: 2px;
    height: 700px;
    display: flex;
    flex-direction:row;
    /* by-default, flex-wrap:nowrap */
    /* flex-wrap:wrap; */
    justify-content:start;
    /* by-default, align-items:stretch; */
    align-items:start;
    /* align-content: center; */
}
.box{
    border: 2px solid black;
    /* width: 100px;
    height: 100px; */
    margin: 2px;
    padding: 2px;
}
#box1{
    background-color: aqua;
    /* order:50; */
    /* flex-shrink: 4; */
    /* flex-grow: 1; */
    /* flex-basis: 200px; */
    /* flex:1 2 auto; */
    align-self: end;
}
#box2{
    background-color: blue;
    /* flex-grow: 1; */
}
#box3{
    background-color: orange;
    /* flex-grow: 1; */
}
#box4{
    background-color: rgb(241, 9, 9);
    /* order:-1; */
    /* flex-grow: 1; */
}

/* Homework. */
/* flew-flow */
/* flex: (flex-grow) (flex-shrink) (flex-basis) */